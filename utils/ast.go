package utils

import (
	"bytes"
	"fmt"
	"go/ast"
	"go/format"
	"go/token"
	"io"
	"log"

	annotation "github.com/YReshetko/go-annotation/pkg"
)

func ExtractTypeFromExpr(v ast.Expr) string {
	switch t := v.(type) {
	case *ast.Ident:
		return t.Name
	case *ast.SelectorExpr:
		return ExtractTypeFromExpr(t.X) + "." + t.Sel.Name
	case *ast.StarExpr:
		return "*" + ExtractTypeFromExpr(t.X)
	case *ast.ArrayType:
		return "[]" + ExtractTypeFromExpr(t.Elt)
	default:
		return fmt.Sprintf("%T", t)
	}
}

func ExtractField(s annotation.Node, n *ast.Field) (string, string, []annotation.Annotation) {
	annotatedNode := s.AnnotatedNode(n)
	var name, ty string
	if _, ok := n.Type.(*ast.StarExpr); ok {
		name = n.Names[0].Name
		ty = ExtractTypeFromExpr(n.Type)
	} else {
		if len(n.Names) > 0 {
			name = n.Names[0].Name
		}

		ty = ExtractTypeFromExpr(n.Type)
	}
	anns := annotatedNode.Annotations()
	return name, ty, anns
}

func AstToGo(dst *bytes.Buffer, node interface{}) error {
	addNewline := func() {
		err := dst.WriteByte('\n') // add newline
		if err != nil {
			log.Panicln(err)
		}
	}

	addNewline()

	err := format.Node(dst, token.NewFileSet(), node)
	if err != nil {
		return err
	}

	addNewline()

	return nil
}

func WriteGoFile(wr io.Writer, funcs []ast.Decl) error {
	header := `// Code generated by goerr. DO NOT EDIT.
`
	buffer := bytes.NewBufferString(header)

	for _, fn := range funcs {
		err := AstToGo(buffer, fn)
		if err != nil {
			return err
		}
	}

	_, err := wr.Write(buffer.Bytes())
	return err
}
