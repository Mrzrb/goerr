// Code generated by aop annotation processor. DO NOT EDIT.
// versions:
//		go: go1.21.0
//		go-annotation: 0.1.0
//		aop: 0.1

package twoaspect

import (
	"github.com/Mrzrb/goerr/annotations/aop"
	"github.com/Mrzrb/goerr/tests/testsdata"
)

type ServiceProxy struct {
	inner  *Service
	aspect *testsdata.BaseAspect
}

func NewServiceProxy(inner *Service) *ServiceProxy {
	return &ServiceProxy{
		inner:  inner,
		aspect: &testsdata.BaseAspect{},
	}
}

type ServiceInterface interface {
	Hello() (ret1 error)

	Hello() (ret1 error)

	Hello() (ret1 error)

	Hello1() (ret1 error)
}

func (r *ServiceProxy) Hello() (ret1 error) {
	joint := aop.Jointcut{
		TargetName: "Service",
		TargetType: "Service",
		Args:       []aop.Args{},
		Fn: func() {
			ret1 = r.inner.Hello()
		},
	}

	r.aspect.Handler(joint)

	return ret1
}
func (r *ServiceProxy) Hello() (ret1 error) {
	joint := aop.Jointcut{
		TargetName: "Service",
		TargetType: "Service",
		Args:       []aop.Args{},
		Fn: func() {
			ret1 = r.inner.Hello()
		},
	}

	r.aspect.Handler(joint)

	return ret1
}
func (r *ServiceProxy) Hello() (ret1 error) {
	joint := aop.Jointcut{
		TargetName: "Service",
		TargetType: "Service",
		Args:       []aop.Args{},
		Fn: func() {
			ret1 = r.inner.Hello()
		},
	}

	r.aspect.Handler(joint)

	return ret1
}
func (r *ServiceProxy) Hello1() (ret1 error) {
	joint := aop.Jointcut{
		TargetName: "Service",
		TargetType: "Service",
		Args:       []aop.Args{},
		Fn: func() {
			ret1 = r.inner.Hello1()
		},
	}

	r.aspect.Handler(joint)

	return ret1
}

type Service1Proxy struct {
	inner  *Service1
	aspect *BaseAspect1
}

func NewService1Proxy(inner *Service1) *Service1Proxy {
	return &Service1Proxy{
		inner:  inner,
		aspect: &BaseAspect1{},
	}
}

type Service1Interface interface {
}
