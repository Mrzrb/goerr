// Code generated by aop annotation processor. DO NOT EDIT.
// versions:
//		go: go1.21.0
//		go-annotation: 0.1.0
//		aop: 0.1

package service

import (
	"github.com/Mrzrb/goerr/annotations/aop"
	"github.com/Mrzrb/goerr/tests/testsdata/subdir"
)

type ServiceProxy struct {
	inner *Service

	aspect0 *subdir.SubAspect
}

func NewServiceProxy(inner *Service) *ServiceProxy {
	return &ServiceProxy{
		inner: inner,

		aspect0: &subdir.SubAspect{},
	}
}

type ServiceInterface interface {
	Hello() (ret1 error)

	Hello() (ret1 error)

	Hello() (ret1 error)

	Hello1() (ret1 error)
}

func (r *ServiceProxy) Hello() (ret1 error) {
	joint := aop.Jointcut{
		TargetName: "Service",
		TargetType: "Service",
		MethodName: "Hello",
		Args:       []aop.Args{},
		Fn: func() {
			ret1 = r.inner.Hello()
		},
	}

	fn := aop.GenerateChain(joint,

		func(j aop.Jointcut) {
			r.aspect0.Handle(j)
		},
	)
	fn()
	return ret1
}
func (r *ServiceProxy) Hello() (ret1 error) {
	joint := aop.Jointcut{
		TargetName: "Service",
		TargetType: "Service",
		MethodName: "Hello",
		Args:       []aop.Args{},
		Fn: func() {
			ret1 = r.inner.Hello()
		},
	}

	fn := aop.GenerateChain(joint,

		func(j aop.Jointcut) {
			r.aspect0.Handle(j)
		},
	)
	fn()
	return ret1
}
func (r *ServiceProxy) Hello() (ret1 error) {
	joint := aop.Jointcut{
		TargetName: "Service",
		TargetType: "Service",
		MethodName: "Hello",
		Args:       []aop.Args{},
		Fn: func() {
			ret1 = r.inner.Hello()
		},
	}

	fn := aop.GenerateChain(joint,

		func(j aop.Jointcut) {
			r.aspect0.Handle(j)
		},
	)
	fn()
	return ret1
}
func (r *ServiceProxy) Hello1() (ret1 error) {
	joint := aop.Jointcut{
		TargetName: "Service",
		TargetType: "Service",
		MethodName: "Hello1",
		Args:       []aop.Args{},
		Fn: func() {
			ret1 = r.inner.Hello1()
		},
	}

	fn := aop.GenerateChain(joint,

		func(j aop.Jointcut) {
			r.aspect0.Handle(j)
		},
	)
	fn()
	return ret1
}
