// Code generated by aop annotation processor. DO NOT EDIT.
// versions:
//		go: go1.21.0
//		go-annotation: 0.1.0
//		aop: 0.1

package twoaspect

import (
	"github.com/Mrzrb/goerr/annotations/aop"
	"github.com/Mrzrb/goerr/examples/aop/common"
)

type Two1Proxy struct {
	inner  *Two1
	aspect *common.Common1
}

func NewTwo1Proxy(inner *Two1) *Two1Proxy {
	return &Two1Proxy{
		inner:  inner,
		aspect: &common.Common1{},
	}
}

type Two1Interface interface {
	Hello() (ret1 int64, ret2 error)
}

func (r *Two1Proxy) Hello() (ret1 int64, ret2 error) {
	joint := aop.Jointcut{
		TargetName: "Two1",
		TargetType: "Two1",
		Args:       []aop.Args{},
		Fn: func() {
			ret1, ret2 = r.inner.Hello()
		},
	}

	r.aspect.Handler(joint)

	return ret1, ret2
}

type Two2Proxy struct {
	inner  *Two2
	aspect *common.Common1
}

func NewTwo2Proxy(inner *Two2) *Two2Proxy {
	return &Two2Proxy{
		inner:  inner,
		aspect: &common.Common1{},
	}
}

type Two2Interface interface {
	Hello(param1 int, s1 Two1) (ret1 int64, ret2 error)
}

func (r *Two2Proxy) Hello(param1 int, s1 Two1) (ret1 int64, ret2 error) {
	joint := aop.Jointcut{
		TargetName: "Two2",
		TargetType: "Two2",
		Args:       []aop.Args{},
		Fn: func() {
			ret1, ret2 = r.inner.Hello(param1, s1)
		},
	}

	joint.Args = append(joint.Args, aop.Args{Name: "param1", Type: "int", Value: param1})
	joint.Args = append(joint.Args, aop.Args{Name: "s1", Type: "Two1", Value: s1})

	r.aspect.Handler(joint)

	return ret1, ret2
}
