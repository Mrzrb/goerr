// Code generated by aop annotation processor. DO NOT EDIT.
// versions:
//		go: go1.21.0
//		go-annotation: 0.1.0
//		aop: 0.1

package twoaspect

import (
	"github.com/Mrzrb/goerr/annotations/aop_core"
	"github.com/Mrzrb/goerr/examples/aop/common"
)

type Two2Proxy struct {
	inner *Two2

	aspect0 *common.Logger
}

func NewTwo2Proxy(inner *Two2) *Two2Proxy {
	return &Two2Proxy{
		inner: inner,

		aspect0: &common.Logger{},
	}
}

type Two2Interface interface {
	Hello(param1 int, s1 *Two1) (ret1 int64, ret2 error)
}

func (r *Two2Proxy) Hello(param1 int, s1 *Two1) (ret1 int64, ret2 error) {
	joint := aop_core.Jointcut{
		TargetName: "Two2",
		TargetType: "Two2",
		MethodName: "Hello",
		Args:       []aop_core.Args{},
	}

	joint.Args = append(joint.Args, aop_core.Args{Name: "param1", Type: "int", Value: param1})
	joint.Args = append(joint.Args, aop_core.Args{Name: "s1", Type: "*Two1", Value: s1})

	runContext := aop_core.RunContext{}
	returnResult := aop_core.ReturnResult{}

	returnResult.Args = append(returnResult.Args, &aop_core.Args{Name: "", Type: "int64", Value: ret1})
	returnResult.Args = append(returnResult.Args, &aop_core.Args{Name: "", Type: "error", Value: ret2})

	mutableArgs := aop_core.MuteableArgs{}

	mutableArgs.Args = append(mutableArgs.Args, &joint.Args[0])
	mutableArgs.Args = append(mutableArgs.Args, &joint.Args[1])
	runContext.MuteableArgs = mutableArgs
	runContext.ReturnResult = returnResult

	joint.Fn = func() error {
		ret1, ret2 = r.inner.Hello(mutableArgs.Args[0].Value.(int), mutableArgs.Args[1].Value.(*Two1))

		if ret2 != nil {
			return ret2
		}

		runContext.ReturnResult.Args[0].Value = ret1
		runContext.ReturnResult.Args[1].Value = ret2
		return nil
	}

	aop_core.GenerateChain(&joint, &runContext,

		func(j aop_core.Jointcut, m *aop_core.RunContext) error {
			return r.aspect0.Handler(j, m)
		},
	)
	joint.Fn()
	return aop_core.Cast[int64](returnResult.Args[0].Value), aop_core.Cast[error](returnResult.Args[1].Value)
}
